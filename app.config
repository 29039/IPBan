<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="LogFilesToParse" type="IPBan.LogFilesToParseConfigSectionHandler, IPBan"/>
    <section name="ExpressionsToBlock" type="IPBan.ExpressionsToBlockConfigSectionHandler, IPBan"/>
  </configSections>

  <!-- A collection of log files to parse, these are polled periodically based on PingInterval for each log file -->
  <LogFilesToParse>
    <LogFiles>

      <!-- SSH failed logins, Ubuntu -->
      <LogFile>
        
        <!-- The file source (i.e. SSH, SMTP, etc.) -->
        <Source>SSH</Source>
        
        <!-- The folder and mask to watch for log files to parse - one entry per line -->
        <PathAndMask>
          /var/log/auth*.log
          /var/log/secure*
        </PathAndMask>
        
        <!-- Whether to parse all sub directories of the path recursively -->
        <Recursive>false</Recursive>
        
        <!--
          Regex for each file line to parse out the user name and ip address
          It is recommended to use \s for leading and trailing spaces for the regex as those are trimmed internally at the ends of the text
        -->
        <!--
        Example lines
        Feb 21 08:35:22 localhost sshd[5774]: Failed password for root from 116.31.116.24 port 29160 ssh2
        Jul  3 12:52:21 vps192513 sshd[16201]: Connection closed by 150.95.154.204 port 56032 [preauth] (no attempt to login after timeout)
        -->
        <Regex>
          <![CDATA[
            \s*\w+\s+\w+\s+[0-9:]+\s+\w+\s+sshd.*?\s+failed\s+password\s+for(\sinvalid\suser)?\s+(?<username>.+?)\s+from\s+(?<ipaddress>.+?)\s+port\s+[0-9]+\s+ssh2?\s*|
            \s*\w+\s+\w+\s+[0-9:]+\s+\w+\s+sshd.*?\s+connection\s+closed\s+by\s+((invalid\s+user\s+)?(?<username>.+?)\s+)?(?<ipaddress>.+?)\s+port\s+[0-9]+\s+\[preauth\]\s*|
          ]]>
        </Regex>

        <!-- Specify specific platforms here or . for all platforms (not recommended) - use Linux, MAC or Windows or Ubuntu, etc. -->
        <PlatformRegex>Linux</PlatformRegex>

        <!-- How often to parse and check for new files, etc. - in milliseconds -->
        <PingInterval>10000</PingInterval>

        <!-- 16 MB max size before deleting files and starting over -->
        <MaxFileSize>16777216</MaxFileSize>
        
      </LogFile>

      <!--
        Custom log entries, Linux
        For custom logs, write this type of line and ipban will add a failed login:
        ipban failed login: 10.10.10.10, source: ApplicationName, user: FailedUserName
      -->
      <LogFile>

        <Source>IPBanCustom</Source>
        <PathAndMask>/var/log/ipbancustom*.log</PathAndMask>
        <Recursive>false</Recursive>
        <Regex>
          <![CDATA[
            ^\s*ipban\sfailed\slogin,\sip\saddress:\s(?<ipaddress>.+?),\ssource:\s(?<source>.+?),\suser:\s(?<username>.+?)\s*,?
          ]]>
        </Regex>
        <PlatformRegex>Linux</PlatformRegex>
        <PingInterval>10000</PingInterval>
        <MaxFileSize>16777216</MaxFileSize>

      </LogFile>

      <!-- Exchange failed logins, Windows -->
      <LogFile>

        <Source>MSExchange</Source>
        <PathAndMask>C:/Program Files/Microsoft/Exchange Server/*.log</PathAndMask>
        <Recursive>true</Recursive>

        <!--
        Example line: 2018-10-08T15:09:27.508Z,00000000002A64E8,2,5.5.5.5:993,109.75.46.81:40016,user.name@domain.com,23,31,30,authenticate,plain,"R=""2 NO AUTHENTICATE failed."";Msg=""AuthFailed:LogonDenied,User: user.name@domain.com"";ErrMsg=AuthFailed:LogonDenied"
        -->
        <Regex>
          <![CDATA[
            .*?,.*?,.*?,.*?,(?<ipaddress>.+?),(?<username>.+?),.*?AuthFailed
          ]]>
        </Regex>

        <PlatformRegex>Windows</PlatformRegex>
        <PingInterval>10000</PingInterval>
        <MaxFileSize>16777216</MaxFileSize>
        
      </LogFile>

      <!--
        Custom log entries, Windows
        Write log files to C:/IPBanCustomLogs/*.log and write this type of line to the log and ipban will add a failed login:
        ipban failed login ip address: 10.10.10.10, source: ApplicationName, user: FailedUserName
      -->
      <LogFile>

        <Source>IPBanCustom</Source>
        <PathAndMask>C:/IPBanCustomLogs/*.log</PathAndMask>
        <Recursive>true</Recursive>
        <Regex>
          <![CDATA[
              ^\s*ipban\sfailed\slogin,\sip\saddress:\s(?<ipaddress>.+?),\ssource:\s(?<source>.+?),\suser:\s(?<username>.+?)\s*,?
          ]]>
        </Regex>
        <PlatformRegex>Windows</PlatformRegex>
        <PingInterval>10000</PingInterval>
        <MaxFileSize>16777216</MaxFileSize>
        
      </LogFile>
      
    </LogFiles>
  </LogFilesToParse>

  <!--
    * WINDOWS ONLY *
    Setup expressions to block for Windows event viewer.
    Each entry should be in a Group tag.
    You may specify the keywords to look for as well (uses boolean AND).
    In each group there is xpath and a regex. Regex can be empty if not checked.
    It is recommended to use \s for leading and trailing spaces for the regex as those are trimmed internally at the ends of the text
    All must match in the event for it to be filtered, and at least one regex must have an ipaddress group to pull out the ip address to block.
  -->
  <ExpressionsToBlock>
    <Groups>

      <!-- This group will block audit failures from failed login attempts, along with dropped packets to Windows -->
      <Group>
        <Source>RDP</Source>
        <Keywords>0x8010000000000000</Keywords>
        <Path>Security</Path>
        <Expressions>
          <Expression>
            <XPath>//EventID</XPath>
            <Regex>^(4625|5152)$</Regex>
          </Expression>
          <Expression>
            <XPath>//Data[@Name='IpAddress' or @Name='Workstation' or @Name='SourceAddress']</XPath>
            <Regex>
              <![CDATA[
                (?<ipaddress>.+)
              ]]>
            </Regex>
          </Expression>
        </Expressions>
      </Group>

      <!-- This group will block audit failures from failed login attempts to Microsoft SQL Server -->
      <!--
      <EventData>
        <Data>username</Data> 
        <Data>Reason: Could not find a login matching the name provided.</Data> 
        <Data>[CLIENT: 192.168.1.99]</Data> 
        <Binary>184800000E000000090000004E0053003500320034003400300036000000070000006D00610073007400650072000000</Binary> 
      </EventData>
      -->
      <Group>
        <Source>MSSQL</Source>
        <Keywords>0x90000000000000</Keywords>
        <Path>Application</Path>
        <Expressions>
          <Expression>
            <XPath>//Provider[@Name='MSSQLSERVER']</XPath>
            <Regex></Regex>
          </Expression>
          <Expression>
            <XPath>//Data</XPath>
            <Regex>
              <![CDATA[
                ^(?!(\[CLIENT\s?:|Reason\s?:))(?<username>.+)
              ]]>
            </Regex>
          </Expression>
          <Expression>
            <XPath>//Data</XPath>
            <Regex>
              <![CDATA[
                \[CLIENT\s?:\s?(?<ipaddress>.*?)\]
              ]]>
            </Regex>
          </Expression>
        </Expressions>
      </Group>

      <!-- This group will block audit failures from failed login attempts to MySQL Server -->
      <Group>
        <Source>MySQL</Source>
        <Keywords>0x80000000000000</Keywords>
        <Path>Application</Path>
        <Expressions>
          <Expression>
            <XPath>//Provider[@Name='MySQL']</XPath>
            <Regex></Regex>
          </Expression>
          <Expression>
            <XPath>//Data</XPath>
            <Regex>
              <![CDATA[
                Access denied for user '?(?<username>.*?)'@'(?<ipaddress>.*?)'
              ]]>
            </Regex>
          </Expression>
        </Expressions>
      </Group>
      
      <!-- This group will block audit failures from MS Exchange -->
      <Group>
        <Source>MSExchange</Source>
        <Keywords>0x80000000000000</Keywords>
        <Path>System</Path>
        <Expressions>
          <Expression>
            <XPath>//Provider[@Name='MSExchangeTransport']</XPath>
            <Regex></Regex>
          </Expression>
          <Expression>
            <XPath>//Data</XPath>
            <Regex>LogonDenied</Regex>
          </Expression>
          <Expression>
            <XPath>//Data</XPath>
            <Regex>
              <![CDATA[
                (?<ipaddress>.+)
              ]]>
            </Regex>
          </Expression>
        </Expressions>
      </Group>
      
      <!-- This group will block audit failures from failed login attempts to phpMyAdmin Web Interface -->
      <Group>
        <Source>phpMyAdmin</Source>
        <Keywords>0x80000000000000</Keywords>
        <Path>Application</Path>
        <Expressions>
          <Expression>
            <XPath>//Data</XPath>
            <Regex>phpMyAdmin</Regex>
          </Expression>
          <Expression>
            <XPath>//Data</XPath>
            <Regex>
              <![CDATA[
                user denied: (?<username>.*?)\(mysql-denied\) from *(?<ipaddress>.+)
              ]]>
            </Regex>
          </Expression>
        </Expressions>
      </Group>
      
      <!--
        This group will block OpenSSH login failures
      -->
      <Group>
        <Source>SSH</Source>
        <Keywords>0x8000000000000000</Keywords>
        <Path>OpenSSH/Admin</Path>
        <Expressions>
          <Expression>
            <XPath>//Data[@Name='payload']</XPath>
            <Regex>
              <![CDATA[
                maximum authentication attempts exceeded for( invalid user)? (?<username>.*?) from (?<ipaddress>.*?)\s
              ]]>
            </Regex>
          </Expression>
        </Expressions>
      </Group>
      <Group>
        <Source>SSH</Source>
        <Keywords>0x4000000000000000</Keywords>
        <Path>OpenSSH/Operational</Path>
        <Expressions>
          <Expression>
            <XPath>//Data[@Name='payload']</XPath>
            <Regex>
              <![CDATA[
                Failed password for( invalid user)? (?<username>.*?) from (?<ipaddress>.*?)\s|
                Connection closed by (?<ipaddress>.*?) port [0-9]+ \[preauth\]
              ]]>
            </Regex>
          </Expression>
        </Expressions>
      </Group>
      
      <!--
        This group will block NTLM login failures in the Applications and Services Logs > Microsoft-Windows-RemoteDesktopServices-RdpCoreTS/Operational log
        OpCode 14 indicates an invalid protocol, which is usually a sign of a hacker
      -->
      <Group>
        <Source>RDP</Source>
        <Keywords>0x4000000000000000</Keywords>

        <Path>Microsoft-Windows-RemoteDesktopServices-RdpCoreTS/Operational</Path>
        <Expressions>
          <Expression>
            <XPath>//Opcode</XPath>
            <Regex>
              <![CDATA[
                ^14$
              ]]>
            </Regex>
          </Expression>
          <Expression>
            <XPath>//Data[@Name='ClientIP' or @Name='IPString']</XPath>
            <Regex>
              <![CDATA[
                (?<ipaddress>.+)
              ]]>
            </Regex>
          </Expression>
        </Expressions>
      </Group>
    
    </Groups>
  </ExpressionsToBlock>

  <appSettings>

    <!-- Number of failed logins before banning the ip address -->
    <add key="FailedLoginAttemptsBeforeBan" value="5"/>

    <!-- The duration of time to ban an ip address (DD:HH:MM:SS) - 00:00:00:00 for forever -->
    <add key="BanTime" value="07:00:00:00"/>

    <!-- True to clear and unban all the ip addresses from the firewall upon restart, false otherwise -->
    <add key="ClearBannedIPAddressesOnRestart" value="false"/>

    <!-- The duration after the last failed login attempt that the ip is forgotten (count reset back to 0). Set to 00:00:00:00 to never forget an ip. (DD:HH:MM:SS) -->
    <add key="ExpireTime" value="01:00:00:00"/>

    <!-- How often the service should do house-keeping such as banning ip addresses, un-banning ip addresses, reloading config, etc. (DD:HH:MM:SS) -->
    <add key="CycleTime" value="00:00:00:15"/>

    <!-- The minimum time between failed login attempts for an ip address to increment the ban counter -->
    <add key="MinimumTimeBetweenFailedLoginAttempts" value="00:00:00:01"/>
    
    <!--
    Rule prefix name for firewall rules, must contain only A-Z, 0-9 and _
    -->
    <add key="FirewallRulePrefix" value="IPBan_"/>

    <!-- Comma separated list of ip addresses OR DNS names that are never banned -->
    <add key="Whitelist" value=""/>

    <!-- Whether to create a whitelist firewall rule. This gives all whitelist ip access to all ports -->
    <add key="CreateWhitelistFirewallRule" value="false"/>

    <!--
      Regular expression for more advanced whitelisting. Shortcut: use * to allow any piece of an ip (i.e. 128.128.128.*).
      Sample regex that whitelists a few ips: ^(128\.128\.128\.*)|(99\.99\.99\.[0-9])$
      More info about regex: http://www.regular-expressions.info/    
    -->
    <add key="WhitelistRegex" value=""/>

    <!-- Comma separated list of ip addresses OR DNS names OR user names to always ban and NEVER unban -->
    <add key="Blacklist" value=""/>

    <!--
      Regular expression for more advanced blacklisting. Shortcut: use * to allow any piece of an ip, dns name or user name (i.e. 128.128.128.*).
      Sample regex that blacklists a few ips: ^(128\.128\.128\.*)|(99\.99\.99\.[0-9])$
      More info about regex: http://www.regular-expressions.info/    
    -->
    <add key="BlacklistRegex" value=""/>

    <!--
      Comma separated list of user names that are allowed. UserNameWhiteListMinimumEditDistance is checked for user names not in the list
      to determine whether a failed user name should be banned. Case is ignored. Empty user names are always allowed.
      *** IMPORTANT *** This can represent an attack vector by a hacker. If they know you are using IPBan and they don't get locked out right
      away, they might know they are somewhat close to the right user name. Make sure your passwords are complex enough and this shouldn't be a problem.
    -->
    <add key="UserNameWhitelist" value=""/>

    <!--
      If the edit distance (levenshtein distance) of a failed user name is greater than this distance away, the user name is immediately banned.
      Set to 0 to ban all failed user names if UserNameWhitelist has entries. Case is ignored. Empty user names are always allowed.
    -->
    <add key="UserNameWhiteListMinimumEditDistance" value="2" />

    <!-- Number of failed logins before banning the ip address if the user name is in the user name whitelist -->
    <add key="FailedLoginAttemptsBeforeBanUserNameWhitelist" value="20"/>

    <!--
    Allows setting a type of firewall if not using the default firewall implementation. You must add this class to the code yourself and annotate with RequiredOperatingSystem and CustomName.
    Prefix with OS:ClassName, example: Windows:MyWindowsFirewall,Linux:MyLinuxFirewall,OSX:MyMacFirewall
    -->
    <add key="FirewallType" value=""/>
    
    <!---
      Run an external process when a ban occurs. Separate the process and any arguments with a pipe (|). ###IPADDRESS### will be replaced with the actual IP which was banned. The pipe is required.
      Example: c:\system files\on_ip_banned.exe|###IPADDRESS### -q
    -->
    <add key="ProcessToRunOnBan" value=""/>

    <!-- 
      Url to query to get the external ip address, the url should return a string which is the external ip address.
    -->
    <add key="ExternalIPAddressUrl" value="https://checkip.amazonaws.com/"/>
    
    <!--
      A url to get when the service updates, empty for none.
      Example: http://192.168.1.2/ipban/update?ip=###IPADDRESS###&amp;remote_ip=###REMOTE_IPADDRESS###&amp;name=###MACHINENAME###&amp;version=###VERSION###&amp;guid=###GUID###&amp;osname=###OSNAME###&amp;osversion=###OSVERSION###
    -->
    <add key="GetUrlUpdate" value=""/>

    <!--
      A url to get when the service starts, empty for none.
      Example: http://192.168.1.2/ipban/start?ip=###IPADDRESS###&amp;remote_ip=###REMOTE_IPADDRESS###&amp;name=###MACHINENAME###&amp;version=###VERSION###&amp;guid=###GUID###&amp;osname=###OSNAME###&amp;osversion=###OSVERSION###
    -->
    <add key="GetUrlStart" value=""/>

    <!--
      A url to get when the service stops, empty for none.
      Example: http://192.168.1.2/ipban/stop?ip=###IPADDRESS###&amp;remote_ip=###REMOTE_IPADDRESS###&amp;name=###MACHINENAME###&amp;version=###VERSION###&amp;guid=###GUID###&amp;osname=###OSNAME###&amp;osversion=###OSVERSION###
    -->
    <add key="GetUrlStop" value=""/>

    <!--
      A url to get config file from, empty for none.
      Example: http://192.168.1.2/ipban/config?guid=###GUID###
    -->
    <add key="GetUrlConfig" value=""/>

    <!--
    ================================================================
    IPBan Pro Version Only Parameters, Ignored For Free Version
    ================================================================
    -->
    
    <!--
      A url to retrieve a global blacklist from, empty for none
      Example: http://localhost:52664/api/BlackList?guid=###GUID###
    -->
    <add key="IPBanPro_UrlBlackList" value=""/>

    <!--
      A url to retrieve a global whitelist from, empty for none
      Example: http://localhost:52664/api/WhiteList?guid=###GUID###
    -->
    <add key="IPBanPro_UrlWhiteList" value=""/>

    <!--
      A url to send all newly blacklisted ip addresses to, empty for none
      Example: http://localhost:52664/api/BlackListed?guid=###GUID###&amp;remote_ip=###BLACKLISTED_IPADDRESS###&amp;banned=###BLACKLISTED_IPADDRESS_BANNED###
    -->
    <add key="IPBanPro_UrlBlackListed" value=""/>

    <!--
      A url to send all failed login attempts to, empty for none
      Example: http://localhost:52664/api/LoginFailed?guid=###GUID###&amp;remote_ip=###FAILED_IPADDRESS###&amp;user_name=###USERNAME###&amp;source=###SOURCE###
    -->
    <add key="IPBanPro_UrlLoginFailed" value=""/>

    <!--
      A url to send all successful login attempts to, empty for none
      Example: http://localhost:52664/api/LoginSucceeded?guid=###GUID###&amp;remote_ip=###SUCCEEDED_IPADDRESS###&amp;user_name=###USERNAME###&amp;source=###SOURCE###
    -->
    <add key="IPBanPro_UrlLoginSucceeded" value=""/>

    <!--
      A url to connect to the IPBan pro server via web socket. Allows sending and receiving data and commands via web socket.
      Examples: ws://localhost:52664/client
    -->
    <add key="IPBanPro_UrlWebSocket" value=""/>

  </appSettings>

</configuration>
